name: Go test linux - Mutual TLS

on: [push, workflow_dispatch]

env:
  SENZING_LOG_LEVEL: TRACE
  OUTPUT_PATH: ${{ github.workspace }}/testdata/certificates

permissions:
  contents: read

jobs:
  go-test-linux:
    name: "Go test with OS: ${{ matrix.os }}; Go: ${{ matrix.go }}"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go: ["1.21"]
        os: [ubuntu-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Enviroment
        run: |
          env

      # -----------------------------------------------------------------------------
      # --- <begin> Create certificates - With luck this can be a GitHub Action.
      #
      # - name: Create certificates
      #   uses: senzing/github-action-create-tls-certificates@v1
      #   with:
      #     output-path: ${{ github.workspace }}/certificates
      #     subject: "/C=US/ST=FL/L=West Palm Beach/O=Dockter/OU=Test CA/CN=dockter.com"
      # -----------------------------------------------------------------------------

      # - name: Create directories
      #   run: |
      #     sudo mkdir ${OUTPUT_PATH}
      #     sudo mkdir ${OUTPUT_PATH}/certificate-authority
      #     sudo mkdir ${OUTPUT_PATH}/client
      #     sudo mkdir ${OUTPUT_PATH}/server
      #     sudo chmod -R 777 ${OUTPUT_PATH}
      #     ls -la ${OUTPUT_PATH}

      # -----------------------------------------------------------------------------
      # --- Self-Signed Certificate Authority
      # -----------------------------------------------------------------------------

      - name: Generate self-signed Certificate Authority
        run: |
          openssl req \
              -days 365 \
              -keyout ${{ github.workspace }}/testdata/certificates/certificate-authority/private_key.pem \
              -newkey rsa:4096 \
              -noenc \
              -out ${{ github.workspace }}/testdata/certificates/certificate-authority/certificate.pem \
              -subj "/C=US/ST=FL/L=West Palm Beach/O=Dockter/OU=Test CA/CN=dockter.com" \
              -x509

      - name: View self-signed Certificate Authority
        run: |
          openssl x509 \
              -in ${{ github.workspace }}/testdata/certificates/certificate-authority/certificate.pem \
              -noout \
              -text

      # -----------------------------------------------------------------------------
      # --- Server certificate
      # -----------------------------------------------------------------------------

      - name: Generate server certificate
        run: |
          openssl req \
              -keyout ${{ github.workspace }}/testdata/certificates/server/private_key.pem \
              -newkey rsa:4096 \
              -noenc \
              -out ${{ github.workspace }}/testdata/certificates/server/certificate_request.pem \
              -subj "/C=US/ST=FL/L=West Palm Beach/O=Dockter/OU=Test Server/CN=dockter.com" \

      - name: Sign server certificate
        run: |
          openssl x509 \
              -CA ${{ github.workspace }}/testdata/certificates/certificate-authority/certificate.pem \
              -CAcreateserial \
              -CAkey ${{ github.workspace }}/testdata/certificates/certificate-authority/private_key.pem \
              -days 360 \
              -extfile ${{ github.workspace }}/testdata/certificates/server/ext.cnf \
              -in ${{ github.workspace }}/testdata/certificates/server/certificate_request.pem \
              -out ${{ github.workspace }}/testdata/certificates/server/certificate.pem \
              -req

      - name: View server certificate
        run: |
          openssl x509 \
              -in ${{ github.workspace }}/testdata/certificates/server/certificate.pem \
              -noout \
              -text

      # -----------------------------------------------------------------------------
      # --- Client certificate
      # -----------------------------------------------------------------------------

      - name: Generate client certificate
        run: |
          openssl req \
              -keyout ${{ github.workspace }}/testdata/certificates/client/private_key.pem \
              -newkey rsa:4096 \
              -noenc \
              -out ${{ github.workspace }}/testdata/certificates/client/certificate_request.pem \
              -subj "/C=US/ST=FL/L=West Palm Beach/O=Dockter/OU=Test Client/CN=dockter.com" \

      - name: Sign client certificate
        run: |
          openssl x509 \
              -CA ${{ github.workspace }}/testdata/certificates/certificate-authority/certificate.pem \
              -CAcreateserial \
              -CAkey ${{ github.workspace }}/testdata/certificates/certificate-authority/private_key.pem \
              -days 360 \
              -extfile ${{ github.workspace }}/testdata/certificates/client/ext.cnf \
              -in ${{ github.workspace }}/testdata/certificates/client/certificate_request.pem \
              -out ${{ github.workspace }}/testdata/certificates/client/certificate.pem \
              -req

      - name: View client certificate
        run: |
          openssl x509 \
              -in ${{ github.workspace }}/testdata/certificates/client/certificate.pem \
              -noout \
              -text

      # -----------------------------------------------------------------------------
      # --- <end> Create certificates
      # -----------------------------------------------------------------------------

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Docker run
        run: |
          docker run \
            --detach \
            --env SENZING_TOOLS_CLIENT_CA_CERTIFICATE_PATH=/testdata/certificates/certificate-authority/certificate.pem \
            --env SENZING_TOOLS_ENABLE_ALL=true \
            --env SENZING_TOOLS_SERVER_CERTIFICATE_PATH=/testdata/certificates/server/certificate.pem \
            --env SENZING_TOOLS_SERVER_KEY_PATH=/testdata/certificates/server/private_key.pem \
            --name servegrpc \
            --publish 8261:8261 \
            --rm \
            --volume ${{ github.workspace }}/testdata:/testdata \
            senzing/serve-grpc

      - name: Install grpcurl
        run: |
          wget https://github.com/fullstorydev/grpcurl/releases/download/v1.9.3/grpcurl_1.9.3_linux_amd64.deb
          sudo apt-get install -y ./grpcurl_1.9.3_linux_amd64.deb
          grpcurl -version

      - name: Test using grpcurl
        run: |
          grpcurl \
            -cacert ${{ github.workspace }}/testdata/certificates/certificate-authority/certificate.pem \
            -cert ${{ github.workspace }}/testdata/certificates/client/certificate.pem \
            -format text \
            -key ${{ github.workspace }}/testdata/certificates/client/private_key.pem \
            localhost:8261 \
              szproduct.SzProduct.GetVersion

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Set up gotestfmt
        uses: gotesttools/gotestfmt-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run go test
        env:
          SENZING_TOOLS_SERVER_CA_CERTIFICATE_PATH: ${{ github.workspace }}/testdata/certificates/certificate-authority/certificate.pem
          SENZING_TOOLS_CLIENT_CERTIFICATE_PATH: ${{ github.workspace }}/testdata/certificates/client/certificate.pem
          SENZING_TOOLS_CLIENT_KEY_PATH: ${{ github.workspace }}/testdata/certificates/client/private_key.pem
        run: |
          go test -json -v -p 1 -coverprofile=./cover.out -covermode=atomic -coverpkg=./... ./...  2>&1 | tee /tmp/gotest.log | gotestfmt

      - name: Store coverage file
        uses: actions/upload-artifact@v4
        with:
          name: cover.out
          path: ./cover.out

      - name: Upload test log
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-log
          path: /tmp/gotest.log
          if-no-files-found: error

  coverage:
    name: Coverage
    needs: go-test-linux
    uses: senzing-factory/build-resources/.github/workflows/go-coverage.yaml@v2
    with:
      coverage-config: ./.github/coverage/testcoverage.yaml
